@using Microsoft.AspNetCore.Components
@using PASSBOOKBRI.Data

@inject Transaksi trx
@inject TimerSet time
@inject Printer print
@inject NavigationManager navman

<div class="col-xl-2 order-1 order-lg-1">
    <button type="button" class="btn btn-primary" style="background-color: #4E4E4E;" @onclick="historitransaksi">Batal</button>
</div>
<div class="col-xl-8 order-2 order-lg-2">
    <ol class="track-progress" style="margin-left: 0%; margin-bottom: 2%;">
        <li class="done">
            <em>1</em>
            <span>Login</span>
        </li>
        <li class="done">
            <em>2</em>
            <span>Menu</span>
        </li>
        <li class="done">
            <em>3</em>
            <span>Data</span>
        </li>
        <li class="done">
            <em>4</em>
            <span>Konfirmasi</span>
        </li>
        <li class="todo">
            <em>5</em>
            <span>Selesai</span>
        </li>
    </ol>
</div>
<div class="col-xl-2 order-3 order-lg-3">
    <button type="button" class="btn btn-primary" style="float: right;" data-toggle="modal" data-target="#exampleModalCenter" @onclick="CheckVisible">Cetak</button>
</div>

@if (isVisible)
{
    <div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-body">
                    <div class="d-flex justify-content-center">
                        <div class="spinner-border" role="status" style="padding:0.5rem; margin-top: 5%;">
                            <span class="sr-only">Loading...</span>
                        </div>
                    </div>
                    <div style="text-align: center; color: white;">
                        <h3 class="teks" style="margin-top: 5%;">Mohon Tunggu,</h3>
                        <h3>Histori Transaksi sedang dicetak...</h3>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@if (isBaris)
{
    <div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-body">
                    <div style="text-align: center; color: white;">
                        <h3>Anda memiliki sisa @trx._sisatransaksi histori transaksi lagi.</h3>
                        <h3 class="teks" style="margin-top: 5%;">Apakah anda ingin mencetak histori transaksi berikutnya?</h3>
                        <button type="button" class="btn btn-primary" style="float: right;" data-toggle="modal" data-target="#exampleModalCenter" @onclick="testVisible">Ya</button>
                        <button type="button" class="btn btn-primary" style="background-color: #4E4E4E;" @onclick="home">Tidak</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public EventCallback<string> OnClick { get; set; }

    private bool isVisible = false;
    private bool isBaris = false;
    private bool berhasil = true;
    private string hour = DateTime.Now.ToString("HH:mm:ss");
    private string[] uraian;
    private string[] tipe;
    private string[] nominal;
    private string saldo = "1000000";
    private int sisatransaksi = 0;
    private int timer = 60000;
    private bool flag = false;

    public void historitransaksi()
    {
        OnClick.InvokeAsync("historitransaksi");
    }

    protected override async Task OnInitializedAsync()
    {
        trx.setModal(isBaris, isVisible);
        flag = true;
        //trx.setFlagTimer(flag);
        time.SetTimer(timer);
        time.onelapsed += TimeHandle;
        Console.WriteLine("TIMER START HISTORITRANSAKSI");
    }

    private void TimeHandle()
    {
        if (flag == true)
        {
            Console.WriteLine("TIME'S UP HISTORITRANSAKSI");
            time.TimeDispose();
            navman.NavigateTo("/waktuhabis");
        }
    }

    private async Task CheckVisible()
    {
        flag = false;
        time.TimeDispose();

        isVisible = !isVisible;
        trx.setModalVisible(isVisible);

        flag = true;
        time.SetTimer(timer);
        time.onelapsed += TimeHandle;
        Console.WriteLine("TIMER START MODALA4");

        trx.setTransaksiHistori(saldo, hour);

        if (berhasil)
        {
            int maxbaris = 12;
            int totalbaris = trx._uraian.Length;
            int halaman;
            int maxhalaman;
            if (totalbaris > maxbaris)
            {
                int n = totalbaris / maxbaris;
                string[] tempuraian = null;
                string[] temptipe = null;
                string[] tempnominal = null;
                int startindex = 0;
                if (totalbaris % maxbaris > 0)
                {
                    n += 1;
                }
                maxhalaman = n;
                trx.setMaxHalaman(maxhalaman.ToString());
                tempuraian = new string[trx._uraian.Length];
                temptipe = new string[trx._tipe.Length];
                tempnominal = new string[trx._nominal.Length];
                Array.Copy(trx._uraian, startindex, tempuraian, 0, trx._uraian.Length);
                Array.Copy(trx._tipe, startindex, temptipe, 0, trx._tipe.Length);
                Array.Copy(trx._nominal, startindex, tempnominal, 0, trx._nominal.Length);
                halaman = 1;
                sisatransaksi = totalbaris;
                trx.setSisaTransaksi(sisatransaksi);
                for (int i = 0; i < n; i++)
                {
                    uraian = null;
                    tipe = null;
                    nominal = null;
                    if (i == n - 1)
                    {
                        trx.clearArray();
                        int sisabaris = tempuraian.Length - startindex;
                        uraian = new string[sisabaris];
                        tipe = new string[sisabaris];
                        nominal = new string[sisabaris];
                        Array.Copy(tempuraian, startindex, uraian, 0, sisabaris);
                        Array.Copy(temptipe, startindex, tipe, 0, sisabaris);
                        Array.Copy(tempnominal, startindex, nominal, 0, sisabaris);
                        trx.setTransaksiHistori(uraian, tipe, nominal, halaman.ToString());
                        saldo = await Task.Run(() => print.HistoriPrint(trx));
                        //await Task.Delay(20000);
                        await Task.Delay(8000);
                        OnClick.InvokeAsync("transaksiberhasil");
                        flag = false;
                        time.TimeDispose();
                        break;
                    }
                    else
                    {
                        trx.clearArray();
                        uraian = new string[maxbaris];
                        tipe = new string[maxbaris];
                        nominal = new string[maxbaris];
                        Array.Copy(tempuraian, startindex, uraian, 0, maxbaris);
                        Array.Copy(temptipe, startindex, tipe, 0, maxbaris);
                        Array.Copy(tempnominal, startindex, nominal, 0, maxbaris);
                        trx.setTransaksiHistori(uraian, tipe, nominal, halaman.ToString());
                        saldo = await Task.Run(() => print.HistoriPrint(trx));
                        startindex += maxbaris;
                        halaman += 1;
                        maxhalaman -= 1;
                        sisatransaksi -= maxbaris;
                        //await Task.Delay(1000);
                        await Task.Delay(8000);
                    }
                    isVisible = false;
                    trx.setModalVisible(isVisible);

                    if (maxhalaman >= 1)
                    {
                        isBaris = true;
                        trx.setModalBaris(isBaris);
                        StateHasChanged();
                        do
                        {
                            await Task.Delay(100);
                        } while (isBaris);
                    }
                }
            }
            else if (totalbaris < maxbaris)
            {
                saldo = await Task.Run(() => print.HistoriPrint(trx));
                //await Task.Delay(10000);
                await Task.Delay(8000);
                OnClick.InvokeAsync("transaksiberhasil");
                flag = false;
                time.TimeDispose();
            }
        }

    }
    private void testVisible()
    {
        trx._isVisible = true;
        trx._isBaris = false;
    }

    private void home()
    {
        OnClick.InvokeAsync("default");
    }
}
